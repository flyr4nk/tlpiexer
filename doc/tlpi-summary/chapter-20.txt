CHAPTER 20
SIGNALS FUNDAMENTAL CONCEPTS

OVERVIEW

   This chapter and next two chapters discuss signals. Although the
   fundamental concepts are simple, our discussion is quite lengthy, since
   there are many details to cover.

   This chapter covers the following topics:

       - the various different signals and their purposes
       - the circumstances in which the kernel may generate a signal for a
         process, and the system calls that one process may use to send a
         signal to another process
       - how a process responds to a signal by default, and the means by which
         a process can change its response to a a signal, in particular,
         through the use of a signal handler, a programmer-defined function
         that is automatically invoked on receipt of a signal
       - the use of a process signal mask to block signals, and the associated
         notion of pending signals
       - how a process can suspend execution and wait for the delivery of a
         signal

SUMMARY

    A signal is a notification that some kind of event has occurred, and may
    be sent to a process by the kernel, by another process, or by itself.
    There is a range of standard signal types, each of which has a unique
    number and purpose.

    Signal delivery is typically asynchronous, meaning that the point at
    which the signal interrupts execution of the process is unpredictable. In
    some cases (e.g., hardware-generated signals) , signals are delivered
    synchronously, meaning that delivery occurs predictably and reproducibly
    at a certain point in the execution of a program.

    By default, a signal either is ignored, terminates a process (with or
    without a core dump), stops a running process, or restart a stopped
    process. The particular default action depends on the signal type.
    Alternatively, a program can use signal() of sigaction() to explicitly
    ignore a signal or to establish a programmer-defined signal handler
    function that invoked when the signal is delivered. For portability
    reasons, establishing a signal handler is best performed using
    sigaction().

    A process (with suitable permission) can send a signal to another process
    using kill(). Sending the null signal (0) is a way of determining if
    particular process ID is in use.

    Each process has a signal mask, which is the set of signals whose delivery
    is currently blocked. Signal can be added to and removed from the signal
    mask using sigprocmask().

    If a signal is received while it is blocked, then it remains pending until
    it is unblocked. Standard signals can't be queued; that is a signal can be
    marked as pending (and thus later delivered) only once. A process can use
    the sigpending() system call to retrieve a signal set(a data structure
    used to represent multiple different signals) identifying the signals that
    it has pending.

    The sigaction() system call provides more control and flexibility than
    signal() when setting the disposition of a signal. Fist, we can specify a
    set additional signals to be blocked when a handler is invoked. In
    addition, various flags can be used to control the actions that occur when
    a signal handler is invoked. For example, there are flags that select the
    older unreliable signal semantics (not blocking the signal causing
    invocation of a handler, and having the disposition of the signal reset to
    its default before the handler is called).

    Using pause(), a process can suspend execution until a signal arrives.
